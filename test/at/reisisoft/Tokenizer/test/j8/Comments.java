package at.reisisoft.Tokenizer.test.j8;

import at.reisisoft.Tokenizer.GenericTokenType;
import at.reisisoft.Tokenizer.LexerException;
import at.reisisoft.Tokenizer.j8.JavaAdvancedTokenType;
import at.reisisoft.Tokenizer.j8.JavaSimpleToken;
import at.reisisoft.Tokenizer.j8.JavaSimpleTokenType;
import org.junit.Test;

import java.util.ArrayList;

import static at.reisisoft.Tokenizer.j8.JavaAdvancedTokenType.*;
import static at.reisisoft.Tokenizer.j8.JavaSimpleTokenType.*;

/**
 * Created by Florian on 27.11.2016.
 */
public class Comments {

    @Test
    public void comments1() throws LexerException {
        ArrayList<JavaSimpleTokenType> tokenizerSolution = TestHelper.getList(
                COMMENTBLOCK,
                PACKAGE,
                COMMENTLINE,
                COMMENTBLOCK,
                VISABILITY,
                COMMENTLINE,
                CLASS,
                COMMENTBLOCK,
                IDENTIFYER,
                COMMENTLINE,
                SCOPESTART,
                COMMENTLINE,
                VISABILITY,
                COMMENTBLOCK,
                IDENTIFYER,
                COMMENTBLOCK,
                BRACKETROUNDSTART,
                COMMENTBLOCK,
                BRACKETROUNDEND,
                SCOPESTART,
                COMMENTLINE,
                SCOPEEND,
                VISABILITY,
                COMMENTBLOCK,
                FINAL,
                COMMENTBLOCK,
                IDENTIFYER,
                COMMENTBLOCK,
                IDENTIFYER,
                COMMENTBLOCK,
                JavaSimpleTokenType.ASSIGNMENT,
                COMMENTLINE,
                NUMBER,
                COMMENTLINE,
                SEMICOLON,
                VISABILITY,
                COMMENTLINE,
                JavaSimpleTokenType.ENUM,
                COMMENTBLOCK,
                IDENTIFYER,
                SCOPESTART,
                IDENTIFYER,
                COMMENTBLOCK,
                COMMA,
                IDENTIFYER,
                COMMENTLINE,
                SCOPEEND,
                JavaSimpleTokenType.ANNOTATION,
                BRACKETROUNDSTART,
                COMMENTBLOCK,
                BRACKETROUNDEND,
                COMMENTLINE,
                VISABILITY,
                COMMENTBLOCK,
                IDENTIFYER,
                COMMENTLINE,
                IDENTIFYER,
                COMMENTBLOCK,
                BRACKETROUNDSTART,
                COMMENTLINE,
                BRACKETROUNDEND,
                COMMENTBLOCK,
                SCOPESTART,
                COMMENTLINE,
                SEMICOLON,
                SCOPEEND,
                SCOPEEND,
                COMMENTLINE,
                COMMENTLINE
        );
        final ArrayList<JavaSimpleToken> javaSimpleTokens = TestHelper.doTokenizerTest("comments1", tokenizerSolution);
        ArrayList<GenericTokenType<?>> lexerSolution = TestHelper.getList(
                FILE,
                COMMENT,
                COMMENTBLOCK,
                PACKAGE,
                COMMENT,
                COMMENTLINE,
                COMMENTBLOCK,
                CLASS_OR_INTERFACE,
                GENERIC_GROUP,
                VISABILITY,
                COMMENT,
                COMMENTLINE,
                CLASS,
                COMMENT,
                COMMENTBLOCK,
                IDENTIFYER,
                COMMENT,
                COMMENTLINE,
                SCOPE,
                SCOPESTART,
                COMMENT,
                COMMENTLINE,
                CONSTRUCTOR,
                GENERIC_GROUP,
                VISABILITY,
                COMMENT,
                COMMENTBLOCK,
                TYPE,
                IDENTIFYER,
                COMMENT,
                COMMENTBLOCK,
                BRACKETS_ROUND,
                BRACKETROUNDSTART,
                COMMENT,
                COMMENTBLOCK,
                BRACKETROUNDEND,
                SCOPE,
                SCOPESTART,
                COMMENT,
                COMMENTLINE,
                SCOPEEND,
                DECLARATION_OR_INITIALISATION,
                VISABILITY,
                COMMENT,
                COMMENTBLOCK,
                FINAL,
                COMMENT,
                COMMENTBLOCK,
                IDENTIFYER,
                COMMENT,
                COMMENTBLOCK,
                IDENTIFYER,
                COMMENT,
                COMMENTBLOCK,
                JavaSimpleTokenType.ASSIGNMENT,
                COMMENT,
                COMMENTLINE,
                CONSTANT_OR_VARIABLE,
                NUMBER,
                COMMENT,
                COMMENTLINE,
                SEMICOLON,
                JavaAdvancedTokenType.ENUM,
                GENERIC_GROUP,
                VISABILITY,
                COMMENT,
                COMMENTLINE,
                JavaSimpleTokenType.ENUM,
                COMMENT,
                COMMENTBLOCK,
                IDENTIFYER,
                SCOPE,
                SCOPESTART,
                GENERIC_GROUP,
                CONSTANT_OR_VARIABLE,
                IDENTIFYER,
                COMMENT,
                COMMENTBLOCK,
                COMMA,
                CONSTANT_OR_VARIABLE,
                IDENTIFYER,
                COMMENT,
                COMMENTLINE,
                SCOPEEND,
                JavaAdvancedTokenType.ANNOTATION,
                JavaSimpleTokenType.ANNOTATION,
                BRACKETS_ROUND,
                BRACKETROUNDSTART,
                COMMENT,
                COMMENTBLOCK,
                BRACKETROUNDEND,
                COMMENT,
                COMMENTLINE,
                FUNCTION,
                GENERIC_GROUP,
                VISABILITY,
                COMMENT,
                COMMENTBLOCK,
                TYPE,
                IDENTIFYER,
                COMMENT,
                COMMENTLINE,
                IDENTIFYER,
                COMMENT,
                COMMENTBLOCK,
                BRACKETS_ROUND,
                BRACKETROUNDSTART,
                COMMENT,
                COMMENTLINE,
                BRACKETROUNDEND,
                COMMENT,
                COMMENTBLOCK,
                SCOPE,
                SCOPESTART,
                COMMENT,
                COMMENTLINE,
                STATEMENT,
                SEMICOLON,
                SCOPEEND,
                SCOPEEND,
                COMMENT,
                COMMENTLINE,
                COMMENTLINE
        );
        TestHelper.doLexerTest(javaSimpleTokens, lexerSolution);
    }
}
